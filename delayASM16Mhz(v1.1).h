#include <avr/io.h>
#ifndef DELAY_ASM_H
#define DELAY_ASM_H


void delay(uint32_t time){
	while(time){
	   asm volatile (    // _delay_ms(1);
		"    ldi  r18, 21"	"\n"
		"    ldi  r19, 199"	"\n"
		"1:  dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
		);
		time--;
	}

}




	// Generated by delay loop calculator
	// at http://www.bretmulvey.com/avrdelay.html
void delay1us(){
	// Delay 16 cycles
	// 1us at 16.0 MHz
	asm volatile (
		"    ldi  r18, 5"	"\n"
		"1:  dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    nop"	"\n"
	);
}
void delay2us(){
	// Delay 32 cycles
	// 2us at 16.0 MHz
	asm volatile (
		"    ldi  r18, 10"	"\n"
		"1:  dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    rjmp 1f"	"\n"
		"1:"	"\n"
	);
}  

void delay4us(){
	// Delay 32 cycles
	// 2us at 16.0 MHz

	asm volatile (
		"    ldi  r18, 10"	"\n"
		"1:  dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    rjmp 1f"	"\n"
		"1:"	"\n"
	);
}

void delay10us(){
	// Delay 160 cycles
	// 10us at 16.0 MHz

	asm volatile (
		"    ldi  r18, 53"	"\n"
		"1:  dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    nop"	"\n"
	);
}
void delay20us(){
	// Delay 320 cycles
	// 20us at 16 MHz

	asm volatile (
		"    ldi  r18, 106"	"\n"
		"1:  dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    rjmp 1f"	"\n"
		"1:"	"\n"
	);

}




void delay1ms(){
	// 1ms at 16.0 MHz
	   asm volatile (    // _delay_ms(1);
		"    ldi  r18, 21"	"\n"
		"    ldi  r19, 199"	"\n"
		"1:  dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
		);
	}

void delay3ms(){
	// Delay 48 000 cycles
	// 3ms at 16.0 MHz

	asm volatile (
		"    ldi  r18, 63"	"\n"
		"    ldi  r19, 85"	"\n"
		"1:  dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    rjmp 1f"	"\n"
		"1:"	"\n"
	);
}

void delay4ms(){
	// Delay 64 000 cycles
	// 4ms at 16.0 MHz

	asm volatile (
		"    ldi  r18, 84"	"\n"
		"    ldi  r19, 29"	"\n"
		"1:  dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
	);
}

void delay14ms(){
	// Delay 224 000 cycles
	// 14ms at 16.0 MHz

	asm volatile (
		"    ldi  r18, 2"	"\n"
		"    ldi  r19, 35"	"\n"
		"    ldi  r20, 230"	"\n"
		"1:  dec  r20"	"\n"
		"    brne 1b"	"\n"
		"    dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    rjmp 1f"	"\n"
		"1:"	"\n"
	);
}




void delay25ms(){
	// 25ms at 16.0 MHz
	asm volatile (
		"    ldi  r18, 3"	"\n"
		"    ldi  r19, 8"	"\n"
		"    ldi  r20, 120"	"\n"
		"1:  dec  r20"	"\n"
		"    brne 1b"	"\n"
		"    dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
	);
}


void delay100ms(){
	// Delay 1 600 000 cycles
	// 100ms at 16.0 MHz
	asm volatile (
		"    ldi  r18, 9"	"\n"
		"    ldi  r19, 30"	"\n"
		"    ldi  r20, 229"	"\n"
		"1:  dec  r20"	"\n"
		"    brne 1b"	"\n"
		"    dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    nop"	"\n"
	);

}

void delay300ms(){

	//
	// Delay 4 800 000 cycles
	// 300ms at 16.0 MHz

	asm volatile (
		"    ldi  r18, 25"	"\n"
		"    ldi  r19, 90"	"\n"
		"    ldi  r20, 178"	"\n"
		"1:  dec  r20"	"\n"
		"    brne 1b"	"\n"
		"    dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
		"    rjmp 1f"	"\n"
		"1:"	"\n"
	);
}
void delay500ms(){
	// Generated by delay loop calculator
	// at http://www.bretmulvey.com/avrdelay.html
	//
	// Delay 8 000 000 cycles
	// 500ms at 16.0 MHz

	asm volatile (
		"    ldi  r18, 41"	"\n"
		"    ldi  r19, 150"	"\n"
		"    ldi  r20, 128"	"\n"
		"1:  dec  r20"	"\n"
		"    brne 1b"	"\n"
		"    dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
	);
}

void delay800ms(){
	// Delay 1 600 000 cycles
	// 100ms at 16.0 MHz
	// Delay 12 800 000 cycles
	// 800ms at 16.0 MHz
	asm volatile (
		"    ldi  r18, 65"	"\n"
		"    ldi  r19, 240"	"\n"
		"    ldi  r20, 52"	"\n"
		"1:  dec  r20"	"\n"
		"    brne 1b"	"\n"
		"    dec  r19"	"\n"
		"    brne 1b"	"\n"
		"    dec  r18"	"\n"
		"    brne 1b"	"\n"
	);
}





#endif //